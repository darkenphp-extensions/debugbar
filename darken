#!/usr/bin/env php
<?php

use Darken\Console\Application;
use Darken\Config\ConfigHelperTrait;
use Darken\Config\ConfigInterface;
use Darken\Debugbar\DebugBarMiddleware;
use Darken\Enum\MiddlewarePosition;
use Darken\Events\AfterBuildEvent;
use Darken\Service\ContainerService;
use Darken\Service\ContainerServiceInterface;
use Darken\Service\EventService;
use Darken\Service\EventServiceInterface;
use Darken\Service\ExtensionService;
use Darken\Service\ExtensionServiceInterface;
use Darken\Service\MiddlewareService;
use Darken\Service\MiddlewareServiceInterface;
use DebugBar\StandardDebugBar;
use Yiisoft\Files\FileHelper;

require __DIR__ . '/vendor/autoload.php';

$config = new class implements ConfigInterface, ContainerServiceInterface, EventServiceInterface, MiddlewareServiceInterface {

    use ConfigHelperTrait;

    /**
     * Register services for dependency injection.
     * 
     * If no services are required, this method and the `ContainerServiceInterface`
     * can be safely removed.
     */
    public function containers(ContainerService $service): ContainerService
    {
        return $service;
    }

    /**
     * Register an event you like to listen to.
     * 
     * If no events are required, this method and the `EventServiceInterface`
     * can be safely removed.
     */
    public function events(EventService $service): EventService
    {
        return $service->on(AfterBuildEvent::class, function (AfterBuildEvent $event) {
            // how could we directly get acces to public folder?
            $assetsFolder = $event->app->config->getRootDirectoryPath() . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR . 'assets';

            //if (!file_exists($assetsFolder)) {
            //    return;
            //}

            $assetsVendor = $assetsFolder . DIRECTORY_SEPARATOR . 'debugbar';
            FileHelper::ensureDirectory($assetsVendor);

            $jsRenderer = $this->getDebugBar()->getJavascriptRenderer();
            //$jsRenderer->setBasePath('/Resources/vendor/');
            
            $assets = $jsRenderer->getAssets();

            foreach ($assets as $types) {
                foreach ($types as $file) {
                    $sourceFile = $file;

                    $targetFile = str_replace($jsRenderer->getBasePath(), '', $sourceFile);
                    
                    echo $sourceFile . ' -> ' . $targetFile . PHP_EOL;

                    FileHelper::copyFile($sourceFile, $assetsVendor . DIRECTORY_SEPARATOR . $targetFile);
                }
            }
        });
    }

    public function getDebugBar() : StandardDebugBar
    {
        // use di ... but for now
        return new StandardDebugBar();
    }

    /**
     * Register application wide middlewares.
     * 
     * If no middlewares are required, this method and the `MiddlewareServiceInterface`
     * can be safely removed.
     */
    public function middlewares(MiddlewareService $service): MiddlewareService
    {
        return $service->add(new DebugBarMiddleware($this->getDebugBar()), MiddlewarePosition::AFTER);
    }

    /**
     * Get the root directory path of the extension.
     */
    public function getRootDirectoryPath(): string
    {
        return $this->path(getcwd());
    }

    /**
     * Enable Debug for local build process.
     */
    public function getDebugMode(): bool
    {
        return true;
    }

    /**
     * Get the output folder for build artifacts.
     */
    public function getBuildOutputFolder(): string
    {
        return $this->getRootDirectoryPath() . DIRECTORY_SEPARATOR . '.build';
    }

    /**
     * Get the namespace for build output.
     */
    public function getBuildOutputNamespace(): string
    {
        return 'Darken\\Debugbar\\Build';
    }

    /**
     * Get a list of folders involved in the building process.
     */
    public function getBuildingFolders(): array
    {
        return [];
    }
};

(new Application($config))
    ->run();